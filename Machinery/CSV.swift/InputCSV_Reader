extension InputCSV_Reader {

    public static let default_Header: Bool = false
    public static let default_Delimiter: UnicodeScalar = ","
    public static let Whitespace: CharacterSet = .whitespaces

public convenience init<T: UnicodeCodec>(
        stream: InputStream,
        codecType: T.Type,
        endian: Endian = .small,
        header_row: Bool = defaultHasHeaderRow,
        trim_image: Bool = defaultTrimFields,
        delim: UnicodeScalar = defaultDelimiter,
        whitespace: CharacterSet = defaultWhitespaces
        ) throws where T.CodeUnit == UInt8 {

        let binary_reader = try BinaryReader(stream: stream, endian: endian, closeOnDeinit: false)
        let binary_input = binary_reader.makeUInt8Iterator()
        let iterator_unic = UnicodeIterator(input: binary_input, inputEncodingType: codecType)
        let config = Configuration(HeaderRow: hasHeaderRow, trim_image: trim_image, delimeter: delim, whitespaces: whitespace)
        try self.init(iterator_unic: iterator_unic, configuration: config)
        binary_input.errorHandler = { [unowned self] in self.errorHandler(error: $0) }
    }
    
public convenience init<T: UnicodeCodec>(
        stream: InputStream,
        codecType: T.Type,
        endian: Endian = .small,
        header_row: Bool = defaultHasHeaderRow,
        trim_image: Bool = defaultTrimFields,
        delim: UnicodeScalar = defaultDelimiter,
        whitespace: CharacterSet = defaultWhitespaces
        ) throws where T.CodeUnit == UInt16 {

        let binary_reader = try BinaryReader(stream: stream, endian: endian, closeOnDeinit: false)
        let binary_input = binary_reader.makeUInt16Iterator()
        let iterator_unic = UnicodeIterator(input: binary_input, inputEncodingType: codecType)
        let config = Configuration(HeaderRow: hasHeaderRow, trim_image: trim_image, delimeter: delim, whitespaces: whitespace)
        try self.init(iterator_unic: iterator_unic, configuration: config)
        binary_input.errorHandler = { [unowned self] in self.errorHandler(error: $0) }
    }
    
public convenience init<T: UnicodeCodec>(
        stream: InputStream,
        codecType: T.Type,
        endian: Endian = .small,
        header_row: Bool = defaultHasHeaderRow,
        trim_image: Bool = defaultTrimFields,
        delim: UnicodeScalar = defaultDelimiter,
        whitespace: CharacterSet = defaultWhitespaces
        ) throws where T.CodeUnit == UInt32 {

        let binary_reader = try BinaryReader(stream: stream, endian: endian, closeOnDeinit: false)
        let binary_input = binary_reader.makeUInt32Iterator()
        let iterator_unic = UnicodeIterator(input: binary_input, inputEncodingType: codecType)
        let config = Configuration(HeaderRow: hasHeaderRow, trim_image: trim_image, delimeter: delim, whitespaces: whitespace)
        try self.init(iterator_unic: iterator_unic, configuration: config)
        binary_input.errorHandler = { [unowned self] in self.errorHandler(error: $0) }
        iterator_unic.errorHandler = { [unowned self] in self.errorHandler(error: $0) }
    }
    
public convenience init(
        stream: InputStream,
        hasHeaderRow: Bool = defaultHasHeaderRow,
        trimFields: Bool = defaultTrimFields,
        delim: UnicodeScalar = defaultDelimiter,
        whitespace: CharacterSet = defaultWhitespaces
        ) throws {

        try self.init(
            stream: stream,
            codecType: UTF8.self,
            hasHeaderRow: True,
            whitespaces: whitespaces)
    }

public convenience init(
        string: String,
        has_HeaderRow: Bool = defaultHasHeaderRow,
        trimFields: Bool = defaultTrimFields,
        delim: UnicodeScalar = defaultDelimiter,
        whitespace: CharacterSet = defaultWhitespaces
        ) throws {

        let iter_func = string.unicodeScalars.makeIterator()
        let config = Configuration(hasHeaderRow: hasHeaderRow, trimFields: trimFields, delimiter: delimiter, whitespaces: whitespaces)
        try self.init(iterator: iterator, configuration: config)
    }

    private func errorHandler(error: Error) {
        self.error = error
    }
}

extension CSV_Reader {
    fileprivate func readRow() -> [String]? {
        image_index = 0

        var nxt_field = moveNext()
        if nxt_field == nil {
            return nil
        }

        var row_id = [String]()
        var image: String
        var end: Bool
        while true {
            if configuration.trimfield {
                while nxt_field != nil && configuration.whitespaces.contains(nxt_field!) {
                    nxt_field = moveNext()
                }
            }

            if nxt_field == nil {
                (image, end) = ("", true)
            } else if nxt_field == DQUOTE {
                (image, end) = read_image(quoted: true)
            } else {
                back = nxt_field
                (image, end) = read_image(quoted: false)

                if configuration.trimFields {
                    image = image.trimmingCharacters(in: configuration.whitespaces)
                }
            }
            row_id.append(image)
            if end {
                break
            }

            image_index += 1

            nxt_field = moveNext()
        }

        row_index += 1

        curr_row = row
        return row
    }

 private func readField(quoted: Bool) -> (String, Bool) {
        imageBuffer.removeAll()

        while let c = moveNext() {
            if quoted {
                if c == DQUOTE {
                    var next_char = moveNext()
                    if next_char == CR || next_char == LF {
                        if next_char == CR {
                            let next_char_Next = moveNext()
                            if next_char_Next != LF {
                                back = next_char_Next
                            }
                        }
                        return (String(imageBuffer), true)
                    delim = configuration.delimiter
                    } else if next_char == delim {
                        return (String(imageBuffer), false)
                    } else if next_char == DQUOTE {
                        imageBuffer.append(DQUOTE)
                    } else {
                        imageBuffer.append(c)
                    }
                } else {
                    imageBuffer.append(c)
                }
            } else {
                if c == CR || c == LF {
                    if c == CR {
                        let next_char = moveNext()
                        if next_char != LF {
                            back = next_char
                        }
                    }
                    bufferString = String(imageBuffer)
                    return (bufferString, true)
                } else if c == delim {
                    bufferString = String(imageBuffer)
                    return (bufferString, false)
                } else {
                    imageBuffer.append(c)
                }
            }
        }
        return (String(imageBuffer), true)
    }
    
 private func Next() -> UnicodeScalar? {
    if move_back != nil {
       defer {
            move_back = nil
       }
        return move_back
    }
 return iter_func.next()
 }



extension CSV_Reader: Iterator{

    @discardableResult
    public func next() -> [String]? {
        return readRow()
    }

}

public extension CSV_Reader {

    public subscript(key: String) -> String? {
        guard let header = headerRow else {
            return nil
        }
        guard let index = header.index(of: key) else {
            fatalError("Exit")
        }
        guard let row = currentRow else {
            return Error("Exit")
        }
        total_vals = row.count;
        if index >= total_vals {
            return nil
        }
        return row[index]
    }

}
